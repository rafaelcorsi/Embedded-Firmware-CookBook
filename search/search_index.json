{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Embedded System Cook Book \u00b6 Ideia do livro \u00e9 de ter receitas de como desenvolver firmware para sistemas embarcados, as receitas ser\u00e3o de \"aplica\u00e7\u00f5es\", \"sensores\" e \"atuadores\" sem pensar muito no HW, mais focado para o firmware. misc sensores atuadores dsp","title":"Home"},{"location":"#embedded-system-cook-book","text":"Ideia do livro \u00e9 de ter receitas de como desenvolver firmware para sistemas embarcados, as receitas ser\u00e3o de \"aplica\u00e7\u00f5es\", \"sensores\" e \"atuadores\" sem pensar muito no HW, mais focado para o firmware. misc sensores atuadores dsp","title":"Embedded System Cook Book"},{"location":"misc/digital_in/","text":"Digital Input - Pooling \u00b6 Digital input output (I/O) is the most simple way to read from external world. This signal can assume only two states: On/OFF, 1 / 0 , High / Low . most common uses Buttons (push/ slider/ dip switch) Signal pulse (encoder) ... The peripheral that allows us to read a digital value is common named: Parallel I/O - PIO General-Purpose I/O - GPIO Normally this peripherals controls more than one pin and each microcontroller has several instances of the same peripheral, to control more pins. Each pin can be configured independent. Microchip SAM Microchip SAM microcontrollers called this as PIO, each instance of the PIO is called PIO A , PIO B , PIO C , ... each PIO can controll up to 32 independents pins. Hardware \u00b6 There is two way to use a button: with Pull-Up or Pull-Down. Most peripherals allow to enable a internal Pull-UP/Pull-Down resistor, with no need to connet resistores to the uC. Internal Pull-Up Best solution (reduces the risk of burning, uses fewer components) Setup: Connect button to pin and to gnd Need to configure Pull-Up on the peripheral. No need to external resistor Read 1 when not pressed and 0 when pressed. External Pull-Up Setup: Connect button to pin and to gnd Add a parallel resistor to VCC must respect max pin voltage Read 1 when not pressed and 0 when pressed. Firmware \u00b6 Steps to read a simple digital data from PIO pin for the Enable system clock/ board configs. Enable the peripheral Configure on the peripheral: Pin as input As need: Pull-Up/ Pull-Down Read the data Example for internal Pull-Up \u00b6 Firmware example for SAME70, with internal Pull-Up #define BUT_PIO PIOA #define BUT_PIO_ID ID_PIOA #define BUT_IDX 11 #define BUT_IDX_MASK (1 << BUT_IDX) #define BUT_SETTINGS PIO_PULLUP int main ( void ){ // init system sysclk_init (); // enable and configure peripheral pmc_enable_periph_clk ( BUT_PIO_ID ); pio_configure ( BUT_PIO , PIO_INPUT , BUT_IDX_MASK , BUT_SETTINGS ); while ( 1 ){ if ( pio_get ( BUT_PIO , PIO_INPUT , BUT_IDX_MASK )){ // button not pressed } else { // button pressed } } }","title":"Digital Input - Pooling"},{"location":"misc/digital_in/#digital-input-pooling","text":"Digital input output (I/O) is the most simple way to read from external world. This signal can assume only two states: On/OFF, 1 / 0 , High / Low . most common uses Buttons (push/ slider/ dip switch) Signal pulse (encoder) ... The peripheral that allows us to read a digital value is common named: Parallel I/O - PIO General-Purpose I/O - GPIO Normally this peripherals controls more than one pin and each microcontroller has several instances of the same peripheral, to control more pins. Each pin can be configured independent. Microchip SAM Microchip SAM microcontrollers called this as PIO, each instance of the PIO is called PIO A , PIO B , PIO C , ... each PIO can controll up to 32 independents pins.","title":"Digital Input - Pooling"},{"location":"misc/digital_in/#hardware","text":"There is two way to use a button: with Pull-Up or Pull-Down. Most peripherals allow to enable a internal Pull-UP/Pull-Down resistor, with no need to connet resistores to the uC. Internal Pull-Up Best solution (reduces the risk of burning, uses fewer components) Setup: Connect button to pin and to gnd Need to configure Pull-Up on the peripheral. No need to external resistor Read 1 when not pressed and 0 when pressed. External Pull-Up Setup: Connect button to pin and to gnd Add a parallel resistor to VCC must respect max pin voltage Read 1 when not pressed and 0 when pressed.","title":"Hardware"},{"location":"misc/digital_in/#firmware","text":"Steps to read a simple digital data from PIO pin for the Enable system clock/ board configs. Enable the peripheral Configure on the peripheral: Pin as input As need: Pull-Up/ Pull-Down Read the data","title":"Firmware"},{"location":"misc/digital_in/#example-for-internal-pull-up","text":"Firmware example for SAME70, with internal Pull-Up #define BUT_PIO PIOA #define BUT_PIO_ID ID_PIOA #define BUT_IDX 11 #define BUT_IDX_MASK (1 << BUT_IDX) #define BUT_SETTINGS PIO_PULLUP int main ( void ){ // init system sysclk_init (); // enable and configure peripheral pmc_enable_periph_clk ( BUT_PIO_ID ); pio_configure ( BUT_PIO , PIO_INPUT , BUT_IDX_MASK , BUT_SETTINGS ); while ( 1 ){ if ( pio_get ( BUT_PIO , PIO_INPUT , BUT_IDX_MASK )){ // button not pressed } else { // button pressed } } }","title":"Example for internal Pull-Up"},{"location":"misc/digital_out/","text":"Digital I/O out \u00b6 Digital input output (I/O) is the most simple data to control the external world. This signal can assume only two states: On/OFF, 1 / 0 , High / Low . most common uses Buttons (push/ slider/ dip switch) Signal pulse (enconder) ... The peripheral that allows us to read a digital value is commun named: :left_arrow: Parallel I/O - PIO General Purpose I/O - GPIO Steps to read a digital data: Enable de peripheral Configure the Pin as input Read the data #define pin 13 #define pin_pio PIOA int main ( void ){ pio_enable ( pin_pio ); pio_set_input ( pin_pio , pin ); while ( 1 ){ pio_get ( pin_pio , pin ); } }","title":"Digital I/O out"},{"location":"misc/digital_out/#digital-io-out","text":"Digital input output (I/O) is the most simple data to control the external world. This signal can assume only two states: On/OFF, 1 / 0 , High / Low . most common uses Buttons (push/ slider/ dip switch) Signal pulse (enconder) ... The peripheral that allows us to read a digital value is commun named: :left_arrow: Parallel I/O - PIO General Purpose I/O - GPIO Steps to read a digital data: Enable de peripheral Configure the Pin as input Read the data #define pin 13 #define pin_pio PIOA int main ( void ){ pio_enable ( pin_pio ); pio_set_input ( pin_pio , pin ); while ( 1 ){ pio_get ( pin_pio , pin ); } }","title":"Digital I/O out"}]}